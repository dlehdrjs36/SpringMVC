<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	
	<!-- JPA 설정 관련 파일, 트랜잭션 설정 파일 -->
	<beans:import resource="jpa-context.xml"/> 
	<beans:import resource="transaction-context.xml"/> 
	
	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 데이터 형변환 (JavaObject-Json) 하기 위해서 HttpMessageConverter를 구현 -->
	<annotation-driven>
		<!-- argument resolver @AuthUser (세션처리) 어노테이션을 처리할 수 있도록 핸들러 설정. -->
		<!-- bean 등록한 순서대로 모든 argument-resolver가 동작한다. -->
		<!-- HandlerMethodArgumentResolver의 supportsParameter()에서 MethodParameter를 판단하여 argument-resolver가 동작된다. -->
		<argument-resolvers>
		<beans:bean class="com.springmvc.test.web.interceptor.LogOutHandlerMethodArgumentResolver" />
		<beans:bean class="com.springmvc.test.web.interceptor.AuthUserHandlerMethodArgumentResolver" />	
		</argument-resolvers>	
	</annotation-driven>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />


	<!-- ┏Excel 사용을 위한 ViewResolver 등록┓ -->
	<!-- excel. ExcelxlsxView를 호출할때 사용되는 ViewResolver. -->
	<beans:bean p:order="3"
		class="org.springframework.web.servlet.view.BeanNameViewResolver" />
	<!-- ViewResolver 이용하여 엑셀 파일 생성 -->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<!-- ViewResolver 컨트롤러가 작업한 결과를 DispatcherServlet이 받는다. DispatcherServlet은 
		받은 결과(화면정보)를 ViewResolver에게 주면, ViewResolver는 화면정보를 완성시켜 DispatcherServlet에게 
		전달해준다. DispatcherServlet은 완성된 화면정보를 받아서 클라이언트에 보여준다. -->

	<beans:bean p:order="4"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
<!-- Rest에서 representation을 선택하는 협상자. 파일의 확장자를 기반으로 representation을 선택한다.(뷰) -->
	<beans:bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean"> 
		<beans:property name="defaultContentType" value="text/html" /> 
		<beans:property name="parameterName" value="type" /> 
		<beans:property name="favorParameter" value="true" /> 
		<beans:property name="ignoreUnknownPathExtensions" value="false" /> 
		<beans:property name="ignoreAcceptHeader" value="false" /> 
		<beans:property name="useJaf" value="true" /> 
		<beans:property name="mediaTypes">
			<beans:map>
				<beans:entry key="html" value="text/html" />
				<!-- jackson 라이브러리를 통해서 자바객체는 자동으로 json, xml로 변환된다. -->
				<beans:entry key="json" value="application/json" />
				<beans:entry key="xml" value="application/xml" />
			</beans:map>
		</beans:property>
	</beans:bean> 
	
	<!-- context:component-scan 어노테이션 기반으로 개발할 수 있도록 설정. 설정파일에 일일이 bean등록할 필요없다. 
		어노테이션 설정된 클래스를 자동으로 컨테이너가 찾아서 bean등록(메모리에 올려) 한다. -->
	<context:component-scan
		base-package="com.springmvc.test" />

	<!-- 파일업로드, MultipartResolver 설정 -->
	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="100000000" />
		<beans:property name="maxInMemorySize"
			value="100000000" />
	</beans:bean>

	<!-- 스프링JDBC, JdbcTemplate, ORM(Mybatis), JPA(hibernate)를 사용하기 위해서 DataSource 설정 -->
	<beans:bean id="dataSourceSpied"
		class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName"
			value="oracle.jdbc.OracleDriver" />
		<beans:property name="url"
			value="jdbc:oracle:thin:@localhost:1521:XE" />
		<beans:property name="username" value="boardtest" />
		<beans:property name="password" value="boardtest" />
	</beans:bean>
	<!-- JDBC log 설정 -->
	<beans:bean id="dataSource"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<beans:constructor-arg ref="dataSourceSpied" />
		<beans:property name="logFormatter">
			<beans:bean
				class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<beans:property name="loggingType" value="MULTI_LINE" />
				<beans:property name="sqlPrefix" value="SQL:::" />
			</beans:bean>
		</beans:property>
	</beans:bean>

	<!-- mybatis 설정 -->
	<!-- 1. SqlSessionFactoryBean 등록 -->
	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation"
			value="classpath:sql-map-config.xml" />
		<beans:property name="mapperLocations"
			value="classpath:mappers/*.xml" />
	</beans:bean>
	<!-- 2. SqlSessionFactoryBean 객체에서 SqlSessionTemplate 객체를 얻어온다. -->
	<!-- SqlSessionTemplate 객체를 생성자 주입방식으로 설정(setter가 없다) -->
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSession" />
	</beans:bean>
	
	<!-- webSocketHandler 설정 -->
	<beans:bean id="myHandler"
		class="com.springmvc.test.web.websocket.SocketHandler" />
	<websocket:handlers>
		<websocket:mapping path="/springserver.do"
			handler="myHandler" /> <!-- springserver.do라고치면 웹소켓 핸들러로 들어가야함. -->
	</websocket:handlers>

	<!-- 예외 처리 설정(XML 기반), 뷰리졸버가 .jsp 알아서 붙여줌 -->
	<beans:bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<beans:property name="exceptionMappings">
			<beans:props>
				<beans:prop key="java.lang.ArithmeticException">
					error/arithmeticError
				</beans:prop>
				<beans:prop key="java.lang.NullPointerException">
					error/nullPointerError
				</beans:prop>
			</beans:props>
		</beans:property>
		<beans:property name="defaultErrorView"
			value="error/error" />
	</beans:bean>

	<!-- 다국어 설정 -->
	<!-- 1.MessageSource 등록 -->
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<beans:value>message.messageSource</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<!-- 2.LocaleResolver 등록 -->
	<beans:bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.SessionLocaleResolver">
	</beans:bean>
	<!-- 3.LocaleChangeinterceptor 등록. 화면의 Locale(언어) 정보를 바꾸고싶을때 사용 -->
	<!-- lang이라는 파라미터로 특정 Locale이 전달된다면 해당하는 Locale로 화면을 구성한다. -->
	<interceptors>
		<beans:bean
			class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
			<beans:property name="paramName" value="lang" />
		</beans:bean>
	</interceptors>


	<!-- Validation 설정 -->
	<!-- Integrated Apache Commons Validator by Spring Modules -->
	<!-- 1. validatorFactory 등록 -->
	<beans:bean id="validatorFactory"
		class="org.springmodules.validation.commons.DefaultValidatorFactory">
		<beans:property name="validationConfigLocations">
			<beans:list>
				<!-- 경량환경 템플릿 밸리데이터 설정 -->
				<beans:value>classpath:/validator/validator-rules.xml</beans:value>
				<beans:value>classpath:/validator/**/*.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	<!-- 2. beanValidator 등록 -->
	<beans:bean id="beanValidator"
		class="org.springmodules.validation.commons.DefaultBeanValidator">
		<beans:property name="validatorFactory"
			ref="validatorFactory" />
	</beans:bean>

	<!-- 스프링 스케쥴러 설정 (크론탭) -->
	<task:scheduler id="jobScheduler" pool-size="10" />
	<task:annotation-driven scheduler="jobScheduler" />
	
	<!-- 타일즈 설정 -->
	<beans:bean
		class="org.springframework.web.servlet.view.UrlBasedViewResolver"
		p:order="1"
		p:viewClass="org.springframework.web.servlet.view.tiles3.TilesView" />
	<!--Don't add suffix or prefix like you do with .jsp files -->
	<beans:bean id="tilesConfigurer"
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:value>/WEB-INF/tiles/tiles.xml</beans:value>
		</beans:property>
	</beans:bean>
	
	<!-- 인터셉터 -->
	<beans:bean id="loginInterceptor" class="com.springmvc.test.web.interceptor.LoginInterceptor"/>
<interceptors>
	<!-- 로그인 처리를 위한 인터셉터(세션등록)-->
	<interceptor>
		<mapping path="/user/login"/>	
		<beans:ref bean="loginInterceptor"/>
		<!-- <beans:bean class="com.springmvc.test.web.interceptor.LoginInterceptor"/> -->
	</interceptor>
	<!-- 세션을 관리하여 각종 권한이 필요한 페이지에 접근 유무 판단하는 인터셉터-->
	<interceptor>
		<mapping path="/**" />	
		<exclude-mapping path="/" />	
		<exclude-mapping path="/fileUploadView.do" />	
		<exclude-mapping path="/user/login" />		
		<beans:bean class="com.springmvc.test.web.interceptor.AuthInterceptor"/>
	</interceptor>
</interceptors>
	
</beans:beans>