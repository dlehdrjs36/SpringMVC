<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	
	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->
<!-- JPA 설정 관련 파일, 트랜잭션 설정 파일 -->
	<beans:import resource="jpa-context.xml"/> 
	<beans:import resource="transaction-context.xml"/> 
	<!-- Enables the Spring MVC @Controller programming model -->
	<!-- 데이터 형변환 (JavaObject-Json) 하기 위해서 HttpMessageConverter를 구현 -->
	<annotation-driven>	</annotation-driven>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<beans:bean p:order="4"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- context:component-scan 어노테이션 기반으로 개발할 수 있도록 설정. 설정파일에 일일이 bean등록할 필요없다. 
		어노테이션 설정된 클래스를 자동으로 컨테이너가 찾아서 bean등록(메모리에 올려) 한다. -->
	<context:component-scan
		base-package="com.springmvc.test" />

	<!-- 스프링JDBC, JdbcTemplate, ORM(Mybatis), JPA(hibernate)를 사용하기 위해서 DataSource 설정 -->
	<beans:bean id="dataSourceSpied"
		class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName"
			value="oracle.jdbc.OracleDriver" />
		<beans:property name="url"
			value="jdbc:oracle:thin:@localhost:1521:XE" />
		<beans:property name="username" value="boardtest" />
		<beans:property name="password" value="boardtest" />
	</beans:bean>
	<!-- JDBC log 설정 -->
	<beans:bean id="dataSource"
		class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<beans:constructor-arg ref="dataSourceSpied" />
		<beans:property name="logFormatter">
			<beans:bean
				class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<beans:property name="loggingType" value="MULTI_LINE" />
				<beans:property name="sqlPrefix" value="SQL:::" />
			</beans:bean>
		</beans:property>
	</beans:bean>

	<!-- mybatis 설정 -->
	<!-- 1. SqlSessionFactoryBean 등록 -->
	<beans:bean id="sqlSession"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="configLocation"
			value="classpath:sql-map-config.xml" />
		<beans:property name="mapperLocations"
			value="classpath:mappers/*.xml" />
	</beans:bean>
	<!-- 2. SqlSessionFactoryBean 객체에서 SqlSessionTemplate 객체를 얻어온다. -->
	<!-- SqlSessionTemplate 객체를 생성자 주입방식으로 설정(setter가 없다) -->
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSession" />
	</beans:bean>

	
</beans:beans>